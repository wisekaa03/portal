type Profile {
  id: ID!

  loginService: String
  loginDomain: String
  loginIdentificator: String
  dn: String

  username: String

  contact: Contact
  fullName: String

  firstName: String
  lastName: String
  middleName: String
  birthday: String
  gender: Int

  company: String
  title: String

  management: String
  department: String
  division: String

  manager: Profile

  telephone: String
  workPhone: String
  fax: String
  mobile: String
  email: String

  employeeID: String

  companyEng: String
  nameEng: String
  managementEng: String
  departmentEng: String
  divisionEng: String
  positionEng: String

  accessCard: String

  country: String
  postalCode: String
  region: String
  town: String
  street: String
  room: String

  disabled: Boolean
  notShowing: Boolean

  thumbnailPhoto: String
  thumbnailPhoto40: String

  createdAt: Date
  updatedAt: Date
}

enum ProfileOrderField {
  loginDomain
  contact
  firstName
  lastName
  middleName
  fullName
  nameEng
  username
  nameeng
  company
  companyEng
  management
  managementEng
  department
  departmentEng
  division
  divisionEng
  title
  positionEng
  telephone
  mobile
  fax
  street
  workPhone
  country
  region
  room
  town
  email
}

enum OrderDirection {
  ASC
  DESC
}

input ProfileOrder {
  direction: OrderDirection
  field: ProfileOrderField
}

type PageInfo {
  startCursor: String
  endCursor: String
  hasNextPage: Boolean
  hasPreviousPage: Boolean
}

type ProfileEdge {
  node: Profile
  cursor: String
}

type ProfileConnection {
  totalCount: Int
  edges: [ProfileEdge]
  pageInfo: PageInfo
}

input ProfileSettingsInput {
  id: ID

  firstName: String
  lastName: String
  middleName: String
  birthday: String
  gender: Int

  company: String
  title: String
  
  management: String
  department: String
  division: String

  telephone: String
  workPhone: String
  fax: String
  mobile: String
  email: String

  companyEng: String
  nameEng: String
  departmentEng: String
  otdelEng: String
  positionEng: String

  accessCard: String

  country: String
  postalCode: String
  region: String
  town: String
  street: String
  room: String

  notShowing: Boolean
}

enum FieldSelection {
  company
  management
  department
  division
  country
  region
  town
  street
  postalCode
  manager
}

type SearchSuggestions {
  name: String
  avatar: String
}

type PhonebookFilter {
  name: String!
  value: String!
}

input PhonebookFilterInput {
  name: String!
  value: String!
}

type Query {
  profiles(first: Int, after: String, orderBy: ProfileOrder, search: String, disabled: Boolean, notShowing: Boolean, filters: [PhonebookFilterInput]): ProfileConnection!
  profile(id: ID!): Profile!
  searchSuggestions(search: String): [SearchSuggestions]
  profileFieldSelection(field: FieldSelection!, department: String): [String]
}

type Mutation {
  changeProfile(profile: ProfileSettingsInput!, thumbnailPhoto: Upload): Profile!
}
