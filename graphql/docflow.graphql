type DocFlowUser {
  id: ID!
  name: String
  presentation: String
}

type DocFlowState {
  id: ID!
  name: String
  presentation: String
}

type DocFlowStatus {
  id: ID!
  name: String
  presentation: String
}

type DocFlowOrganization {
  id: ID!
  name: String
  presentation: String
  fullName: String
  inn: String
  kpp: String
  VATpayer: Boolean
}

type DocFlowSubdivision {
  id: ID!
  name: String
  presentation: String
}

type DocFlowApprovalResult {
  id: ID!
  name: String
  presentation: String
}

type DocFlowVisa {
  id: ID!
  name: String
  presentation: String
  addedBy: DocFlowUser
  comment: String
  date: Date
  result: DocFlowApprovalResult
  reviewer: DocFlowUser
  signatureChecked: Boolean
  signatureValid: Boolean
  signed: Boolean
}

type DocFlowInternalDocument {
  id: ID!
  name: String
  presentation: String
  beginDate: Date
  regDate: Date
  regNumber: String
  title: String
  summary: String
  status: DocFlowStatus
  statusChangeEnabled: Boolean
  statusEnabled: Boolean
  statusApproval: DocFlowStatus
  statusPerformance: DocFlowStatus
  statusRegistration: DocFlowStatus
  organization: DocFlowOrganization
  subdivision: DocFlowSubdivision
  author: DocFlowUser
  responsible: DocFlowUser
  files: DocFlowFiles
  visas: [DocFlowVisa]
}

type DocFlowRole {
  id: ID!
  name: String
  presentation: String
}

type DocFlowTarget {
  name: String
  role: DocFlowRole
  target: DocFlowInternalDocument
  allowDeletion: Boolean
}

type DocFlowFileVersion {
  id: ID!
  name: String
  presentation: String
}

type DocFlowFile {
  id: ID!
  name: String
  author: DocFlowUser
  encrypted: Boolean
  signed: Boolean
  editing: Boolean
  description: String
  activeVersion: DocFlowFileVersion
  binaryData: String
  extension: String
  creationDate: Date
  modificationDateUniversal: Date
  size: Int
}

type DocFlowFiles {
  object: [DocFlowFile]
  error: [String]
}

type DocFlowParentTask {
  id: ID!
  name: String
  presentation: String
  author: DocFlowUser
  beginDate: Date
  blockedByTemplate: Boolean
  completed: Boolean
  description: String
  dueDate: Date
  dueTimeEnabled: Boolean
  executionComment: String
  importance: DocFlowImportance
  leadingTaskEnabled: Boolean
  parentTaskEnabled: Boolean
  performers: [DocFlowUser]
  started: Boolean
  state: DocFlowState
  stateEnabled: Boolean
  target: DocFlowInternalDocument
  targets: [DocFlowTarget]
}

type DocFlowImportance {
  id: ID!
  name: String
  presentation: String
}

type DocFlowTask {
  id: ID!
  name: String
  presentation: String
  importance: DocFlowImportance
  performer: DocFlowUser!
  executed: Boolean
  executionMark: String
  beginDate: Date
  dueDate: Date
  endDate: Date
  description: String
  parentTask: DocFlowParentTask
  processStep: String
  executionComment: String
  author: DocFlowUser!
  accepted: Boolean
  acceptDate: Date
  state: DocFlowState
  htmlView: String
  target: DocFlowInternalDocument
  targets: [DocFlowTarget!]
}

input DocFlowTasksInput {
  cache: Boolean
}

input DocFlowTaskInput {
  id: String!
  cache: Boolean
}

input DocFlowTargetInput {
  id: String!
  cache: Boolean
}

input DocFlowInternalDocumentInput {
  id: String!
  cache: Boolean
}

input DocFlowFileInput {
  id: String!
  cache: Boolean
}

type Query {
  docFlowTasks(tasks: DocFlowTasksInput): [DocFlowTask!]
  docFlowTask(task: DocFlowTaskInput!): DocFlowTask!
  docFlowInternalDocument(internalDocument: DocFlowInternalDocumentInput!): [DocFlowInternalDocument!]
  docFlowFile(file: DocFlowFileInput!): DocFlowFile!
}

type Subscription {
  docFlowTasks(tasks: DocFlowTasksInput): [DocFlowTask!]
  docFlowTask(task: DocFlowTaskInput!): DocFlowTask!
  docFlowInternalDocument(target: DocFlowInternalDocumentInput!): [DocFlowInternalDocument!]
}
