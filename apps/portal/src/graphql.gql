# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

enum Contact {
  GROUP
  PROFILE
  USER
}

"""Date scalar type"""
scalar Date

type DocFlowAccessLevel implements DocFlowInterfaceObject {
  id: ID!
  name: String!
  navigationRef: String
  presentation: String
  type: String!
}

type DocFlowActivityMatter implements DocFlowInterfaceObject {
  id: ID!
  name: String!
  navigationRef: String
  presentation: String
  type: String!
}

type DocFlowApprovalOrder implements DocFlowInterfaceObject {
  id: ID!
  name: String!
  navigationRef: String
  presentation: String
  type: String!
}

type DocFlowApprovalResult implements DocFlowInterfaceObject {
  id: ID!
  name: String!
  navigationRef: String
  presentation: String
  type: String!
}

type DocFlowApprovalType implements DocFlowInterfaceObject {
  id: ID!
  name: String!
  navigationRef: String
  presentation: String
  type: String!
}

type DocFlowBusinessProcessApprovalParticipant {
  approvalOrder: [DocFlowApprovalOrder!]
}

type DocFlowBusinessProcessApprovalTaskApproval implements DocFlowInterfaceObject {
  acceptDate: Date
  accepted: Boolean!
  approvalResult: DocFlowApprovalResult
  author: DocFlowUser!
  beginDate: Date
  businessProcessStep: DocFlowProcessStep
  changeRight: Boolean
  description: String
  dueDate: Date
  endDate: Date
  executed: Boolean!
  executionComment: String
  executionMark: String
  htmlView: String
  id: ID!
  importance: DocFlowBusinessProcessTaskImportance
  iterationNumber: Int
  name: String!
  navigationRef: String
  number: String
  performer: DocFlowBusinessProcessTaskExecutor
  presentation: String
  project: DocFlowProject
  state: DocFlowBusinessProcessState
  target: DocFlowInternalDocument
  targets: [DocFlowBusinessProcessTarget!]
  type: String!
}

type DocFlowBusinessProcessApprovalTaskCheckup implements DocFlowInterfaceObject {
  acceptDate: Date
  accepted: Boolean!
  approvalResult: DocFlowApprovalResult
  approvalResults: [DocFlowBusinessProcessApprovalTaskCheckupApprovalResult!]
  author: DocFlowUser!
  beginDate: Date
  businessProcessStep: DocFlowProcessStep
  changeRight: Boolean
  description: String
  dueDate: Date
  endDate: Date
  executed: Boolean!
  executionComment: String
  executionMark: String
  htmlView: String
  id: ID!
  importance: DocFlowBusinessProcessTaskImportance
  iterationNumber: Int
  name: String!
  navigationRef: String
  number: String
  performer: DocFlowBusinessProcessTaskExecutor
  presentation: String
  project: DocFlowProject
  returned: Boolean
  state: DocFlowBusinessProcessState
  target: DocFlowInternalDocument
  targets: [DocFlowBusinessProcessTarget!]
  type: String!
}

type DocFlowBusinessProcessApprovalTaskCheckupApprovalResult {
  approvalComment: String
  approvalDate: Date
  approvalPerformer: DocFlowBusinessProcessTaskExecutor
  approvalResult: DocFlowApprovalResult
}

type DocFlowBusinessProcessExecutorRole implements DocFlowInterfaceObject {
  comment: String
  id: ID!
  name: String!
  navigationRef: String
  presentation: String
  type: String!
}

type DocFlowBusinessProcessOrderTaskCheckup implements DocFlowInterfaceObject {
  acceptDate: Date
  accepted: Boolean!
  author: DocFlowUser!
  beginDate: Date
  businessProcessStep: DocFlowProcessStep
  changeRight: Boolean
  description: String
  dueDate: Date
  endDate: Date
  executed: Boolean!
  executionComment: String
  executionMark: String
  htmlView: String
  id: ID!
  importance: DocFlowBusinessProcessTaskImportance
  iterationNumber: Int
  name: String!
  navigationRef: String
  number: String
  performer: DocFlowBusinessProcessTaskExecutor
  presentation: String
  project: DocFlowProject
  returned: Boolean
  state: DocFlowBusinessProcessState
  target: DocFlowInternalDocument
  targets: [DocFlowBusinessProcessTarget!]
  type: String!
}

type DocFlowBusinessProcessPerfomanceTaskCheckup implements DocFlowInterfaceObject {
  acceptDate: Date
  accepted: Boolean!
  author: DocFlowUser!
  beginDate: Date
  businessProcessStep: DocFlowProcessStep
  changeRight: Boolean
  checkResults: [DocFlowBusinessProcessPerfomanceTaskCheckupResult!]
  description: String
  dueDate: Date
  endDate: Date
  executed: Boolean!
  executionComment: String
  executionMark: String
  htmlView: String
  id: ID!
  importance: DocFlowBusinessProcessTaskImportance
  iterationNumber: Int
  name: String!
  navigationRef: String
  number: String
  performer: DocFlowBusinessProcessTaskExecutor
  presentation: String
  project: DocFlowProject
  state: DocFlowBusinessProcessState
  target: DocFlowInternalDocument
  targets: [DocFlowBusinessProcessTarget!]
  type: String!
}

type DocFlowBusinessProcessPerfomanceTaskCheckupResult {
  checkComment: String
  executorTask: DocFlowBusinessProcessTask
  returned: Boolean
}

type DocFlowBusinessProcessState implements DocFlowInterfaceObject {
  id: ID!
  name: String!
  navigationRef: String
  presentation: String
  type: String!
}

type DocFlowBusinessProcessTarget {
  allowDeletion: Boolean
  name: String!
  role: DocFlowBusinessProcessTargetRole!
  target: DocFlowInternalDocument!
}

type DocFlowBusinessProcessTargetRole implements DocFlowInterfaceObject {
  id: ID!
  name: String!
  navigationRef: String
  presentation: String
  type: String!
}

type DocFlowBusinessProcessTask implements DocFlowInterfaceObject {
  acceptDate: Date
  accepted: Boolean!
  author: DocFlowUser!
  beginDate: Date
  businessProcessStep: DocFlowProcessStep
  changeRight: Boolean
  description: String
  dueDate: Date
  endDate: Date
  executed: Boolean!
  executionComment: String
  executionMark: String
  htmlView: String
  id: ID!
  importance: DocFlowBusinessProcessTaskImportance
  name: String!
  navigationRef: String
  number: String
  performer: DocFlowBusinessProcessTaskExecutor
  presentation: String
  project: DocFlowProject
  state: DocFlowBusinessProcessState
  target: DocFlowInternalDocument
  targets: [DocFlowBusinessProcessTarget!]
  type: String!
}

type DocFlowBusinessProcessTaskExecutor {
  role: DocFlowBusinessProcessExecutorRole
  user: DocFlowUser
}

type DocFlowBusinessProcessTaskImportance implements DocFlowInterfaceObject {
  id: ID!
  name: String!
  navigationRef: String
  presentation: String
  type: String!
}

type DocFlowCashFlowItem implements DocFlowInterfaceObject {
  id: ID!
  name: String!
  navigationRef: String
  presentation: String
  type: String!
}

type DocFlowCashFlowRow {
  item: [DocFlowCashFlowItem!]!
  total: Float!
  VAT: Float!
}

type DocFlowCorrespondent implements DocFlowInterfaceObject {
  id: ID!
  inn: String
  kpp: String
  legalPrivatePerson: DocFlowLegalPrivatePerson
  name: String!
  navigationRef: String
  presentation: String
  type: String!
}

type DocFlowCurrency implements DocFlowInterfaceObject {
  code: String
  fullName: String
  id: ID!
  name: String!
  navigationRef: String
  presentation: String
  type: String!
}

type DocFlowDocument implements DocFlowInterfaceDocument & DocFlowInterfaceObject {
  accessLevel: DocFlowAccessLevel
  accessLevelEnabled: Boolean
  activityMatter: DocFlowActivityMatter
  activityMatterEnabled: Boolean
  checkRelations: Boolean
  comment: String
  containsScannedOriginals: Boolean
  contentAvailable: Boolean
  currency: DocFlowCurrency
  deletionMark: Boolean
  documentTypeEnabled: Boolean
  enabledProperties: String
  files: [DocFlowFile!]
  filesEnabled: Boolean
  id: ID!
  keyPropertiesValue: String
  limitPropertiesAvailability: Boolean
  name: String!
  navigationRef: String
  numberOfAnnexes: Int
  numberOfCopies: Int
  numberOfSheets: Int
  organization: DocFlowOrganization
  organizationEnabled: Boolean
  performanceDate: Date
  presentation: String
  project: DocFlowProject
  projectsEnabled: Boolean
  regDate: Date
  registrationAvailable: Boolean
  regNumber: String
  relations: [DocFlowDocumentRelation!]
  responsible: DocFlowUser
  sheetsOfAnnexes: Int
  status: DocFlowDocumentStatus
  statusApproval: DocFlowDocumentStatus
  statusChangeEnabled: Boolean
  statusConsideration: DocFlowDocumentStatus
  statusEnabled: Boolean
  statusPerformance: DocFlowDocumentStatus
  statusRegistration: DocFlowDocumentStatus
  statusSigning: DocFlowDocumentStatus
  subdivision: DocFlowSubdivision
  sum: Int
  summary: String
  title: String
  titleBlockedByTemplate: Boolean
  type: String!
  useCaseFiles: Boolean
}

type DocFlowDocumentRelation {
  document: [DocFlowDocument!]
  relatedDocument: [DocFlowDocument!]
  relationType: [DocFlowRelationType!]
}

type DocFlowDocumentStatus implements DocFlowInterfaceObject {
  id: ID!
  name: String!
  navigationRef: String
  presentation: String
  type: String!
}

type DocFlowDueDateSpecificationOption implements DocFlowInterfaceObject {
  id: ID!
  name: String!
  navigationRef: String
  presentation: String
  type: String!
}

type DocFlowFile implements DocFlowInterfaceObject {
  activeVersion: DocFlowFileVersion
  author: DocFlowUser
  binaryData: String
  creationDate: Date
  deletionMark: Boolean
  description: String
  editing: Boolean
  editingUser: DocFlowUser
  encrypted: Boolean
  extension: String
  id: ID!
  lockDate: Date
  modificationDate: Date
  modificationDateUniversal: Date
  name: String!
  navigationRef: String
  owner: DocFlowUser
  presentation: String
  scannedOriginal: Boolean
  signed: Boolean
  size: Int
  template: DocFlowFile
  text: String
  type: String!
}

type DocFlowFileVersion implements DocFlowInterfaceObject {
  author: DocFlowUser
  binaryData: String
  comment: String
  creationDate: Date
  deletionMark: Boolean
  encrypted: Boolean
  extension: String
  id: ID!
  modificationDate: Date
  modificationDateUniversal: Date
  name: String!
  navigationRef: String
  owner: DocFlowUser
  presentation: String
  signed: Boolean
  size: Int
  text: String
  type: String!
}

interface DocFlowInterfaceDocument {
  accessLevel: DocFlowAccessLevel
  accessLevelEnabled: Boolean
  activityMatter: DocFlowActivityMatter
  activityMatterEnabled: Boolean
  checkRelations: Boolean
  comment: String
  containsScannedOriginals: Boolean
  contentAvailable: Boolean
  currency: DocFlowCurrency
  deletionMark: Boolean
  documentTypeEnabled: Boolean
  enabledProperties: String
  files: [DocFlowFile!]
  filesEnabled: Boolean
  id: ID!
  keyPropertiesValue: String
  limitPropertiesAvailability: Boolean
  name: String!
  navigationRef: String
  numberOfAnnexes: Int
  numberOfCopies: Int
  numberOfSheets: Int
  organization: DocFlowOrganization
  organizationEnabled: Boolean
  performanceDate: Date
  presentation: String
  project: DocFlowProject
  projectsEnabled: Boolean
  regDate: Date
  registrationAvailable: Boolean
  regNumber: String
  relations: [DocFlowDocumentRelation!]
  responsible: DocFlowUser
  sheetsOfAnnexes: Int
  status: DocFlowDocumentStatus
  statusApproval: DocFlowDocumentStatus
  statusChangeEnabled: Boolean
  statusConsideration: DocFlowDocumentStatus
  statusEnabled: Boolean
  statusPerformance: DocFlowDocumentStatus
  statusRegistration: DocFlowDocumentStatus
  statusSigning: DocFlowDocumentStatus
  subdivision: DocFlowSubdivision
  sum: Int
  summary: String
  title: String
  titleBlockedByTemplate: Boolean
  type: String!
  useCaseFiles: Boolean
}

interface DocFlowInterfaceObject {
  id: ID!
  name: String!
  navigationRef: String
  presentation: String
  type: String!
}

type DocFlowInternalDocument implements DocFlowInterfaceDocument & DocFlowInterfaceObject {
  accessLevel: DocFlowAccessLevel
  accessLevelEnabled: Boolean
  activityMatter: DocFlowActivityMatter
  activityMatterEnabled: Boolean
  addressee: DocFlowUser
  author: DocFlowUser
  beginDate: Date
  cashFlowRows: [DocFlowCashFlowRow!]
  checkRelations: Boolean
  comment: String
  containsScannedOriginals: Boolean
  contentAvailable: Boolean
  correspondent: DocFlowCorrespondent
  currency: DocFlowCurrency
  deletionMark: Boolean
  documentType: DocFlowInternalDocumentType
  documentTypeEnabled: Boolean
  enabledProperties: String
  endDate: Date
  files: [DocFlowFile!]
  filesEnabled: Boolean
  folder: DocFlowInternalDocumentFolder
  id: ID!
  keyPropertiesValue: String
  limitPropertiesAvailability: Boolean
  name: String!
  navigationRef: String
  numberOfAnnexes: Int
  numberOfCopies: Int
  numberOfSheets: Int
  openEnded: Boolean
  organization: DocFlowOrganization
  organizationEnabled: Boolean
  performanceDate: Date
  presentation: String
  project: DocFlowProject
  projectsEnabled: Boolean
  regDate: Date
  registrationAvailable: Boolean
  regNumber: String
  relations: [DocFlowDocumentRelation!]
  resolutions: [DocFlowResolution!]
  responsible: DocFlowUser
  sheetsOfAnnexes: Int
  signer: DocFlowUser
  status: DocFlowDocumentStatus
  statusApproval: DocFlowDocumentStatus
  statusChangeEnabled: Boolean
  statusConsideration: DocFlowDocumentStatus
  statusEnabled: Boolean
  statusPerformance: DocFlowDocumentStatus
  statusRegistration: DocFlowDocumentStatus
  statusSigning: DocFlowDocumentStatus
  subdivision: DocFlowSubdivision
  sum: Int
  summary: String
  template: [DocFlowInternalDocumentTemplate!]
  title: String
  titleBlockedByTemplate: Boolean
  type: String!
  useCaseFiles: Boolean
  VAT: Int
  visas: [DocFlowVisa!]
}

type DocFlowInternalDocumentFolder implements DocFlowInterfaceObject {
  id: ID!
  name: String!
  navigationRef: String
  presentation: String
  type: String!
}

type DocFlowInternalDocumentTemplate implements DocFlowInterfaceObject {
  blockDerivedDocuments: Boolean
  documentType: DocFlowInternalDocumentType
  folder: DocFlowInternalDocumentFolder
  id: ID!
  name: String!
  navigationRef: String
  organization: DocFlowOrganization
  presentation: String
  type: String!
}

type DocFlowInternalDocumentType implements DocFlowInterfaceObject {
  accountingForCaseFilesEnabled: Boolean
  addresseeEnabled: Boolean
  automaticNumeration: Boolean
  cashFlowDetailsEnabled: Boolean
  correspondentEnabled: Boolean
  durationEnabled: Boolean
  id: ID!
  name: String!
  navigationRef: String
  organizationEnabled: Boolean
  performanceDateEnabled: Boolean
  presentation: String
  productRowsEnabled: Boolean
  sumEnabled: Boolean
  templateRequired: Boolean
  type: String!
  useConfirmation: Boolean
  useSigningByManager: Boolean
}

type DocFlowLegalPrivatePerson implements DocFlowInterfaceObject {
  id: ID!
  name: String!
  navigationRef: String
  presentation: String
  type: String!
}

type DocFlowOrganization implements DocFlowInterfaceObject {
  fullName: String
  id: ID!
  inn: String
  kpp: String
  legalPrivate: DocFlowLegalPrivatePerson
  name: String!
  navigationRef: String
  presentation: String
  type: String!
  VATpayer: Boolean
}

type DocFlowPrivatePerson implements DocFlowInterfaceObject {
  birthday: Date
  comment: String
  id: ID!
  name: String!
  navigationRef: String
  presentation: String
  type: String!
}

enum DocFlowProcessStep {
  Approve
  CheckExecute
  CheckFamiliarize
  Conform
  ConformWithComments
  Execute
  Familiarize
  NotApprove
  NotConform
}

type DocFlowProject implements DocFlowInterfaceObject {
  id: ID!
  name: String!
  navigationRef: String
  presentation: String
  type: String!
}

type DocFlowRelationType implements DocFlowInterfaceObject {
  id: ID!
  name: String!
  navigationRef: String
  presentation: String
  type: String!
}

type DocFlowResolution implements DocFlowInterfaceObject {
  addedBy: DocFlowUser
  date: Date
  id: ID!
  name: String!
  navigationRef: String
  presentation: String
  reviewer: DocFlowUser
  signatureChecked: Boolean
  signatureValid: Boolean
  signed: Boolean
  text: String
  type: String!
}

type DocFlowSubdivision implements DocFlowInterfaceObject {
  head: [DocFlowUser!]
  id: ID!
  name: String!
  navigationRef: String
  presentation: String
  type: String!
}

union DocFlowTask = DocFlowBusinessProcessApprovalTaskApproval | DocFlowBusinessProcessApprovalTaskCheckup | DocFlowBusinessProcessOrderTaskCheckup | DocFlowBusinessProcessPerfomanceTaskCheckup | DocFlowBusinessProcessTask

type DocFlowTasks {
  canHaveChildren: Boolean
  isFolder: Boolean
  task: DocFlowTask
}

input DocFlowTasksInput {
  """Cache this result, default = true"""
  cache: Boolean

  """Set cache, default = true"""
  setCache: Boolean

  """WebSocket results, default = true"""
  websocket: Boolean

  """With files, default = true"""
  withFiles: Boolean
}

type DocFlowUser implements DocFlowInterfaceObject {
  id: ID!
  name: String!
  navigationRef: String
  presentation: String
  privatePerson: DocFlowPrivatePerson
  subdivision: DocFlowSubdivision
  type: String!
}

type DocFlowVisa implements DocFlowInterfaceObject {
  addedBy: DocFlowUser
  comment: String!
  date: Date!
  id: ID!
  name: String!
  navigationRef: String
  presentation: String
  result: DocFlowApprovalResult!
  reviewer: DocFlowUser
  signatureChecked: Boolean!
  signatureValid: Boolean!
  signed: Boolean!
  type: String!
}

enum Gender {
  MAN
  UNKNOWN
  WOMAN
}

type Group {
  createdAt: Date
  description: String
  id: ID
  loginDN: String
  loginDomain: String
  loginGUID: String
  loginService: LoginService!
  name: String!
  updatedAt: Date
}

type Login {
  loginEmail: LoginEmail
  user: User!
}

type LoginEmail {
  error: String
  login: Boolean!
}

enum LoginService {
  FACEBOOK
  GITHUB
  GOOGLE
  LDAP
  LOCAL
  TWITTER
}

type Mutation {
  cacheReset: Boolean!
  changeProfile(profile: ProfileInput!, thumbnailPhoto: Upload!): Profile!
  ldapCheckUsername(domain: String!, username: String!): Boolean!
  ldapNewUser(domain: String!, ldap: ProfileInput!, photo: Upload): Profile!
  logout: Boolean!
  syncLdap: Boolean!
  ticketsComment(comment: TkCommentInput!): TkFile!
  ticketsTaskEdit(attachments: [Upload!], task: TkTaskEditInput!): TkEditTask!
  ticketsTaskFile(file: TkFileInput!): TkFile!
  ticketsTaskNew(attachments: [Upload!], task: TkTaskNewInput!): TkTaskNew!
  userSettings(value: UserSettingsInput!): User!
}

enum OrderDirection {
  ASC
  DESC
}

type PaginatedProfile {
  edges: [ProfileEdge!]
  pageInfo: ProfilePageInfo
  totalCount: Int!
}

enum PhonebookColumnNames {
  accessCard
  city
  company
  companyEng
  contact
  country
  department
  departmentEng
  disabled
  division
  divisionEng
  email
  employeeID
  fax
  firstName
  fullName
  gender
  lastName
  loginDomain
  management
  managementEng
  manager
  middleName
  mobile
  nameEng
  notShowing
  postalCode
  region
  room
  street
  telephone
  thumbnailPhoto
  thumbnailPhoto40
  title
  titleEng
  username
  workPhone
}

type Profile {
  accessCard: String
  addressPersonal: String
  birthday: Date
  city: String
  company: String
  companyEng: String
  contact: Contact
  country: String
  createdAt: Date
  department: String
  departmentEng: String
  disabled: Boolean
  division: String
  divisionEng: String
  email: String
  employeeID: String
  fax: String
  firstName: String
  fullName: String
  gender: Gender
  id: ID
  lastName: String
  loginDN: String
  loginDomain: String
  loginGUID: String
  loginService: LoginService
  management: String
  managementEng: String
  manager: Profile
  middleName: String
  mobile: String
  nameEng: String
  notShowing: Boolean
  postalCode: String
  region: String
  room: String
  street: String
  telephone: String
  thumbnailPhoto: String
  thumbnailPhoto40: String
  title: String
  titleEng: String
  updatedAt: Date
  username: String
  workPhone: String
}

type ProfileEdge {
  cursor: String!
  node: Profile!
}

input ProfileInput {
  accessCard: String
  addressPersonal: String
  birthday: Date
  city: String
  company: String
  companyEng: String
  contact: Contact
  country: String
  department: String
  departmentEng: String
  disabled: Boolean
  division: String
  divisionEng: String
  email: String
  employeeID: String
  fax: String
  firstName: String
  gender: Gender
  id: String
  lastName: String
  management: String
  managementEng: String
  middleName: String
  mobile: String
  nameEng: String
  notShowing: Boolean
  postalCode: String
  region: String
  room: String
  street: String
  telephone: String
  title: String
  titleEng: String
  username: String
  workPhone: String
}

input ProfileOrderInput {
  direction: OrderDirection
  field: PhonebookColumnNames
}

type ProfilePageInfo {
  endCursor: String
  hasNextPage: Boolean
  hasPreviousPage: Boolean
  startCursor: String
}

type Query {
  availableAuthenticationProfiles(newProfile: Boolean, synchronization: Boolean): [String!]!
  docFlowTasks(tasks: DocFlowTasksInput): [DocFlowTasks!]!
  login(domain: String!, password: String!, username: String!): Login!
  loginEmail: LoginEmail!
  me: User!
  profile(id: ID!): Profile!
  profileFieldSelection(field: PhonebookColumnNames!): [String!]!
  profiles(after: String, disabled: Boolean, filters: [UserSettingsPhonebookFilterInput!], first: Int, notShowing: Boolean, orderBy: ProfileOrderInput, search: String): PaginatedProfile!
  searchSuggestions(search: String!): [SearchSuggestions!]!
  ticketsRoutes(routes: TkRoutesInput): TkRoutes!
  ticketsTask(task: TkTaskInput!): TkEditTask!
  ticketsTasks(tasks: TkTasksInput): TkTasks!
}

type SearchSuggestions {
  avatar: String
  name: String
}

type Subscription {
  docFlowTasksSubscription: [DocFlowTasks!]!
  ticketsRoutesSubscription(routes: TkRoutesInput): TkRoutes!
  ticketsTasksSubscription(tasks: TkTasksInput): TkTasks!
  ticketsTaskSubscription(task: TkTaskInput!): TkEditTask!
}

type TkComment {
  authorLogin: String
  body: String
  code: String!
  date: Date
  files: [TkFile!]
  id: ID!
  parentCode: String
  where: TkWhere!
}

input TkCommentInput {
  code: String
  id: String
  where: TkWhere
}

type TkEditTask {
  errors: [String!]
  task: TkTask
  users: [TkUser!]
}

type TkFile {
  body: String
  code: String!
  id: ID!
  mime: String
  name: String
  where: TkWhere!
}

input TkFileInput {
  code: String
  where: TkWhere
}

type TkRoute {
  avatar: String
  code: String!
  description: String
  id: ID!
  name: String
  services: [TkService!]
  where: TkWhere!
}

type TkRoutes {
  errors: [String!]
  routes: [TkRoute!]
}

input TkRoutesInput {
  cache: Boolean
}

type TkService {
  avatar: String
  code: String!
  description: String
  id: ID!
  name: String!
  route: String
  where: TkWhere!
}

type TkTask {
  availableAction: String
  availableStages: String
  body: String
  code: String!
  comments: [TkComment!]
  createdDate: Date
  endDate: Date
  executorUser: String
  files: [TkFile!]
  id: ID!
  initiatorUser: String
  route: TkRoute
  service: TkService
  smallBody: String
  status: String!
  subject: String!
  timeoutDate: Date
  where: TkWhere!
}

input TkTaskEditInput {
  code: String
  comment: String
  where: TkWhere
}

input TkTaskInput {
  cache: Boolean
  code: String
  where: TkWhere
}

type TkTaskNew {
  code: String
  createdDate: Date
  organization: String
  route: String
  service: String
  status: String
  subject: String
  where: TkWhere
}

input TkTaskNewInput {
  body: String
  executorUser: String
  route: String
  service: String
  subject: String
  where: TkWhere
}

type TkTasks {
  errors: [String!]
  tasks: [TkTask!]
  users: [TkUser!]
}

input TkTasksInput {
  cache: Boolean
  find: String
  routeId: String
  serviceId: String
  status: String
  where: TkWhere
}

type TkUser {
  avatar: String
  code: String!
  company: String
  department: String
  division: String
  email: String
  id: ID!
  login: String
  manager: String
  name: String!
  telephone: String
  title: String
  where: TkWhere!
}

enum TkWhere {
  Default
  OSTaudit
  OSThr
  OSTmedia
  SOAP1C
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  createdAt: Date
  disabled: Boolean!
  groups: [Group!]
  id: ID!
  isAdmin: Boolean!
  loginDomain: String
  loginGUID: String
  loginService: LoginService!
  profile: Profile!
  settings: UserSettings!
  updatedAt: Date
  username: String!
}

type UserSettings {
  drawer: Boolean
  fontSize: Int
  lng: String
  phonebook: [UserSettingsPhonebook!]
  task: UserSettingsTask
}

input UserSettingsInput {
  drawer: Boolean
  fontSize: Int
  lng: String
  phonebook: [UserSettingsPhonebookInput!]
  task: UserSettingsTaskInput
}

type UserSettingsPhonebook {
  columns: [PhonebookColumnNames!]
  filters: [UserSettingsPhonebookFilter!]
}

type UserSettingsPhonebookFilter {
  name: PhonebookColumnNames!
  value: String!
}

input UserSettingsPhonebookFilterInput {
  name: PhonebookColumnNames
  value: String
}

input UserSettingsPhonebookInput {
  columns: [PhonebookColumnNames!]
  filters: [UserSettingsPhonebookFilterInput!]
}

type UserSettingsTask {
  favorites: [UserSettingsTaskFavorite!]
  status: String
}

type UserSettingsTaskFavorite {
  code: String!
  svcCode: String!
  where: TkWhere!
}

input UserSettingsTaskFavoriteInput {
  code: String!
  svcCode: String!
  where: TkWhere!
}

input UserSettingsTaskInput {
  favorites: [UserSettingsTaskFavoriteInput!]
  status: String
}
